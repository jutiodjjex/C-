#include <string>
#include <iostream>

// класс который представляет массив в виде объекта
class ARRInt
{
private:
    int A[100]; // массив целых чисел
    int ArrSize; // количество элементов в массиве

public:
    // конструктор
    ARRInt() { ArrSize = 0; }

    ARRInt(int _ArrSize)
    {
        if (_ArrSize>100) _ArrSize=100;
        ArrSize = _ArrSize;

        for (int i=0; i<ArrSize; i++)
            A[i] = 0;
    }

    // метод Set
    void SetAi(int index, int value)
    {
        if ((index>=0) && (index<=ArrSize))
            A[index] = value;
    }
   
    // Ввод массива с клавиатуры 
    void ArrayInitializingByHands() {
    for (int i = 0; i < ArrSize; i++)
    {
        int ArrayEnteringInteger;
        std::cout << "Введите элемент под индексом " << i << ": ";
        std::cin >> ArrayEnteringInteger;
        A[i] = ArrayEnteringInteger;
    }
    }

    // метод Get
    int GetAi(int index) { return A[index]; }
    
    // метод получает размер массива
    int GetArrSize(void) { return ArrSize; }
    
    // метод выводит массив в консоль
    void PrintArr(ARRInt ExampleARRInt) { 
        std::cout << "{";
    for (int i=0; i < ExampleARRInt.GetArrSize(); i++) 
    if (i == ExampleARRInt.GetArrSize() - 1)
        std::cout << ExampleARRInt.GetAi(i) << "}" << "\n";
    else
        std::cout << ExampleARRInt.GetAi(i) << ",";

    }
    
    // метод сортирует массив
    void sort() {
        for (int i = 0; i < ArrSize; i++) // сортировка
            for (int j = ArrSize - 1; j > i; j--)
                if (A[j] < A[i]) std::swap(A[j], A[i]);
        
        std::cout <<"\nОтсортированный массив: ";
        
    }
    
    // метод находит сумму элементов массива
    void sum() {
        int s = 0;
        for (int i = 0; i < ArrSize; i++)
            s += A[i];
        std::cout <<"Сумма элементов массива =  "<< s << std::endl;
    }
    
    // метод находит размерность массива
    void dim() {
        std::cout <<"Размерность массива =  "<< ArrSize;  
    }


    // перегруженный оператор ++
    // форма префикса
    ARRInt operator++(void)
    {
        for (int i=0; i<ArrSize; i++)
            A[i] = A[i] + 1;
        return *this;
    }

    // перегруженный оператор ++, аргумент t не используется
    // форма постфикса
    ARRInt operator++(int t)
    {
        for (int i=0; i<ArrSize; i++)
            A[i] = A[i] + 1;
        return *this;
    }

    // перегруженный оператор --
    // форма префикса
    ARRInt operator--(void)
    {
        for (int i=0; i<ArrSize; i++)
            A[i] = A[i] - 1;
        return *this;
    }

    // перегруженный оператор --, аргумент t не используется
    // форма постфикса
    ARRInt operator--(int t)
    {
        for (int i=0; i<ArrSize; i++)
            A[i] = A[i] - 1;
        return *this;
    }
    
    // перегруженный оператор *, аргумент t - скаляр, на который умножается вектор
    ARRInt operator*(int t)
    {
        for (int i=0; i<ArrSize; i++)
            A[i] = A[i] * t;
        return *this;
    }
    
};

#include <iostream>

using namespace std;

int main()
{
    int ArrSize;
    cout<<"Введите количество элементов в массиве: ";
    cin>> ArrSize;
    //объявляем новый экземпляр класса
    ARRInt ExampleARRInt(ArrSize);
    
    //инициализируем и заполняем новый экземпляр класса формулой: "итератор + 1" для наглядности
    
    //можно засунуть руками цифру в каждый элемент любого индекса, просто мне лень
    //в духе ExampleARRInt.SetAi(индекс_элемента_массива, значение_элемента_массива)
    
    //Можно сделать автоматическую инициализацию массива путем
    ExampleARRInt.ArrayInitializingByHands();
    
    //вывод инициализированного массива в консоль
    cout<<"\nИнициализированный массив: ";
    ExampleARRInt.PrintArr(ExampleARRInt);
    
    //перегрузка префикс-тип инкремента и вывод в консоль
    //можно одной строкой ExampleARRInt.PrintArr(ExampleARRInt++);, я разделил для читаемости
    cout<<"Префикс ++ перегрузка:   ";
    ++ExampleARRInt;
    ExampleARRInt.PrintArr(ExampleARRInt);
    
    //перегрузка постфикс-тип инкремента и вывод в консоль
    cout<<"Постфикс ++ перегрузка:  ";
    ExampleARRInt++;
    ExampleARRInt.PrintArr(ExampleARRInt);
   
    //перегрузка префикс-тип декремента и вывод в консоль 
    cout<<"Префикс -- перегрузка:   ";
    --ExampleARRInt;
    ExampleARRInt.PrintArr(ExampleARRInt);
    
    //перегрузка постфикс-тип декремента и вывод в консоль
    cout<<"Постфикс -- перегрузка:   ";
    ExampleARRInt--;
    ExampleARRInt.PrintArr(ExampleARRInt);
    
    //умножение каждого элемента массива на скаляр с помощью перегрузки оператора *
    //в данном случае умножаем на число 5 (скаляр)
    cout<<"\nВведите скаляр для умножение вектора: ";
    int MultiplyNumber;
    cin>> MultiplyNumber; 
    cout<<"\nУмножение вектора * (перегрузка оператора) на скаляр " << MultiplyNumber << ": ";
    ExampleARRInt*MultiplyNumber;
    ExampleARRInt.PrintArr(ExampleARRInt);
    
    ExampleARRInt.sum();
    
    ExampleARRInt.dim();
    
    ExampleARRInt.sort();
    ExampleARRInt.PrintArr(ExampleARRInt);

    return 0;
}